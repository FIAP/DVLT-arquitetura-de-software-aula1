#!/usr/bin/env node

/**
 * Script para testar o funcionamento do CQRS
 * Execute: node test-cqrs.js
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

// Configurar axios para n√£o gerar erro em c√≥digos 4xx/5xx
axios.defaults.validateStatus = (status) => status < 500;

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testCQRS() {
  console.log('üöÄ Iniciando teste do CQRS...\n');
  
  try {
    // 1. Verificar se API est√° funcionando
    console.log('1. Verificando API...');
    const healthResponse = await axios.get(`${BASE_URL}/health`);
    if (healthResponse.status !== 200) {
      throw new Error('API n√£o est√° funcionando');
    }
    console.log('‚úÖ API funcionando\n');

    // 2. Criar produtos (Commands)
    console.log('2. Criando produtos (Commands)...');
    const products = [
      {
        name: 'Notebook Gaming',
        description: 'Notebook para jogos de alto desempenho',
        price: 4500.00,
        stockQuantity: 8
      },
      {
        name: 'Mouse Gamer',
        description: 'Mouse √≥ptico para jogos',
        price: 250.00,
        stockQuantity: 50
      },
      {
        name: 'Teclado Mec√¢nico',
        description: 'Teclado mec√¢nico com RGB',
        price: 400.00,
        stockQuantity: 30
      }
    ];

    const createdProducts = [];
    for (const product of products) {
      const response = await axios.post(`${BASE_URL}/api/products`, product);
      if (response.status === 201) {
        createdProducts.push(response.data.data);
        console.log(`‚úÖ Produto criado: ${product.name}`);
      } else {
        console.log(`‚ùå Erro ao criar produto: ${product.name}`);
      }
    }
    console.log(`\nüìä ${createdProducts.length} produtos criados\n`);

    // 3. Aguardar sincroniza√ß√£o
    console.log('3. Aguardando sincroniza√ß√£o...');
    await sleep(2000);
    console.log('‚úÖ Sincroniza√ß√£o conclu√≠da\n');

    // 4. Testar queries (Read)
    console.log('4. Testando queries (Read)...');
    
    // Listar todos os produtos
    const allProductsResponse = await axios.get(`${BASE_URL}/api/products`);
    if (allProductsResponse.status === 200) {
      const totalProducts = allProductsResponse.data.data.pagination.total;
      console.log(`‚úÖ Produtos listados: ${totalProducts} produtos encontrados`);
    }

    // Buscar produto por ID
    if (createdProducts.length > 0) {
      const productId = createdProducts[0].id;
      const productResponse = await axios.get(`${BASE_URL}/api/products/${productId}`);
      if (productResponse.status === 200) {
        console.log(`‚úÖ Produto encontrado por ID: ${productResponse.data.data.name}`);
      }
    }

    // Pesquisar produtos
    const searchResponse = await axios.get(`${BASE_URL}/api/products/search/gaming`);
    if (searchResponse.status === 200) {
      const searchResults = searchResponse.data.data.products.length;
      console.log(`‚úÖ Pesquisa realizada: ${searchResults} produtos encontrados`);
    }

    // Buscar por faixa de pre√ßo
    const priceRangeResponse = await axios.get(`${BASE_URL}/api/products/price-range/200/500`);
    if (priceRangeResponse.status === 200) {
      const priceResults = priceRangeResponse.data.data.products.length;
      console.log(`‚úÖ Busca por pre√ßo: ${priceResults} produtos na faixa R$ 200-500`);
    }

    // Estat√≠sticas
    const statsResponse = await axios.get(`${BASE_URL}/api/products/stats/overview`);
    if (statsResponse.status === 200) {
      const stats = statsResponse.data.data;
      console.log(`‚úÖ Estat√≠sticas: ${stats.totalProducts} produtos, R$ ${stats.averagePrice?.toFixed(2)} pre√ßo m√©dio`);
    }

    console.log('\n');

    // 5. Testar atualiza√ß√£o (Command)
    console.log('5. Testando atualiza√ß√£o (Command)...');
    if (createdProducts.length > 0) {
      const productId = createdProducts[0].id;
      const updateData = {
        price: 4200.00,
        stockQuantity: 5
      };
      
      const updateResponse = await axios.put(`${BASE_URL}/api/products/${productId}`, updateData);
      if (updateResponse.status === 200) {
        console.log(`‚úÖ Produto atualizado: ${updateResponse.data.data.name}`);
      }
    }

    // 6. Aguardar sincroniza√ß√£o da atualiza√ß√£o
    console.log('\n6. Aguardando sincroniza√ß√£o da atualiza√ß√£o...');
    await sleep(1000);
    console.log('‚úÖ Sincroniza√ß√£o da atualiza√ß√£o conclu√≠da\n');

    // 7. Verificar eventos
    console.log('7. Verificando eventos...');
    const eventsResponse = await axios.get(`${BASE_URL}/api/products/admin/events`);
    if (eventsResponse.status === 200) {
      const events = eventsResponse.data.data;
      console.log(`‚úÖ Eventos encontrados: ${events.length} eventos no Event Store`);
      
      // Contar tipos de eventos
      const eventTypes = events.reduce((acc, event) => {
        acc[event.event_type] = (acc[event.event_type] || 0) + 1;
        return acc;
      }, {});
      
      console.log('üìä Tipos de eventos:');
      Object.entries(eventTypes).forEach(([type, count]) => {
        console.log(`   - ${type}: ${count}`);
      });
    }

    console.log('\n');

    // 8. Testar replay de eventos
    console.log('8. Testando replay de eventos...');
    const replayResponse = await axios.post(`${BASE_URL}/api/products/admin/replay`);
    if (replayResponse.status === 200) {
      console.log(`‚úÖ Replay conclu√≠do: ${replayResponse.data.data.processedCount} eventos processados`);
    }

    console.log('\n');

    // 9. Verificar consist√™ncia
    console.log('9. Verificando consist√™ncia dos dados...');
    const finalListResponse = await axios.get(`${BASE_URL}/api/products`);
    if (finalListResponse.status === 200) {
      const finalProducts = finalListResponse.data.data.products;
      console.log(`‚úÖ Consist√™ncia verificada: ${finalProducts.length} produtos na base de leitura`);
    }

    console.log('\n');

    // 10. Testar exclus√£o (Command)
    console.log('10. Testando exclus√£o (Command)...');
    if (createdProducts.length > 0) {
      const productId = createdProducts[createdProducts.length - 1].id;
      const deleteResponse = await axios.delete(`${BASE_URL}/api/products/${productId}`);
      if (deleteResponse.status === 200) {
        console.log(`‚úÖ Produto deletado com sucesso`);
      }
    }

    // 11. Aguardar sincroniza√ß√£o da exclus√£o
    console.log('\n11. Aguardando sincroniza√ß√£o da exclus√£o...');
    await sleep(1000);
    console.log('‚úÖ Sincroniza√ß√£o da exclus√£o conclu√≠da\n');

    // 12. Resultado final
    console.log('12. Resultado final...');
    const finalResponse = await axios.get(`${BASE_URL}/api/products`);
    if (finalResponse.status === 200) {
      const finalCount = finalResponse.data.data.pagination.total;
      console.log(`‚úÖ Teste conclu√≠do: ${finalCount} produtos finais\n`);
    }

    console.log('üéâ TESTE CQRS CONCLU√çDO COM SUCESSO!\n');
    console.log('üìã Resumo do que foi testado:');
    console.log('   ‚úÖ Cria√ß√£o de produtos (Commands)');
    console.log('   ‚úÖ Listagem de produtos (Queries)');
    console.log('   ‚úÖ Busca por ID (Query)');
    console.log('   ‚úÖ Pesquisa por texto (Query)');
    console.log('   ‚úÖ Busca por faixa de pre√ßo (Query)');
    console.log('   ‚úÖ Estat√≠sticas (Query)');
    console.log('   ‚úÖ Atualiza√ß√£o de produtos (Command)');
    console.log('   ‚úÖ Exclus√£o de produtos (Command)');
    console.log('   ‚úÖ Event Store funcionando');
    console.log('   ‚úÖ Replay de eventos funcionando');
    console.log('   ‚úÖ Sincroniza√ß√£o ass√≠ncrona funcionando');
    console.log('   ‚úÖ Consist√™ncia entre bases de dados');
    console.log('\nüöÄ O padr√£o CQRS est√° funcionando perfeitamente!');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Dica: Verifique se a aplica√ß√£o est√° rodando em http://localhost:3000');
      console.log('   Execute: npm run dev');
    }
    
    process.exit(1);
  }
}

// Executar teste
if (require.main === module) {
  testCQRS();
}

module.exports = { testCQRS }; 